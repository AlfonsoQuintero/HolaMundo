<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Analizador de Frases</title>
    <!-- Incluimos Tailwind CSS para un estilo moderno y responsivo -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-indigo-500 to-purple-600 min-h-screen flex items-center justify-center p-4">

    <!-- Contenedor principal de la aplicación con un estilo de tarjeta -->
    <div class="bg-white rounded-3xl shadow-2xl p-8 max-w-lg w-full text-center transform transition-all duration-300 hover:scale-105">
        
        <!-- Título de la aplicación -->
        <h1 class="text-4xl font-bold text-gray-800 mb-6 flex items-center justify-center">
            <i class="fas fa-feather-alt text-purple-500 mr-3"></i>
            Análisis de Frases
        </h1>

        <!-- Campo de entrada para escribir una nueva frase -->
        <div class="mb-6">
            <h2 class="text-2xl font-bold text-gray-700 mb-4">Escribe tu frase aquí:</h2>
            <textarea id="input-frase" class="w-full h-24 p-4 border border-gray-300 rounded-2xl focus:outline-none focus:ring-2 focus:ring-indigo-400 text-lg" placeholder="Escribe una frase para analizar..."></textarea>
            <button id="analizar-btn" class="bg-indigo-500 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-transform duration-200 hover:bg-indigo-600 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-indigo-300 mt-4 w-full sm:w-auto">
                Analizar Frase
            </button>
        </div>

        <!-- Contenedor para la frase principal -->
        <blockquote class="text-2xl italic text-gray-600 mb-8 leading-relaxed mt-4 pt-4 border-t border-gray-200">
            <p id="proverbio-text">Frase actual: <span class="font-semibold text-gray-800">No hay frase cargada.</span></p>
        </blockquote>

        <!-- Contenedor de botones de acción principales -->
        <div id="botones-accion-container" class="flex flex-col sm:flex-row justify-center items-center space-y-4 sm:space-y-0 sm:space-x-4 mb-6">
            <button id="explicar-btn" class="bg-indigo-600 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-transform duration-200 hover:bg-indigo-700 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-indigo-300 w-full sm:w-auto">
                Explicar Frase ✨
            </button>
            <button id="leer-btn" class="bg-blue-600 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-transform duration-200 hover:bg-blue-700 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300 w-full sm:w-auto">
                Leer Frase ✨
            </button>
            <div class="flex items-center space-x-2 w-full sm:w-auto">
                <select id="lang-select" class="p-3 border border-gray-300 rounded-full w-1/2 text-center focus:outline-none focus:ring-2 focus:ring-green-400">
                    <option value="en">Inglés</option>
                    <option value="fr">Francés</option>
                    <option value="es">Español</option>
                </select>
                <button id="traducir-btn" class="bg-green-600 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-transform duration-200 hover:bg-green-700 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-green-300 w-1/2">
                    Traducir ✨
                </button>
            </div>
        </div>

        <!-- Contenedor para los resultados generados (ahora debajo de los botones de acción) -->
        <div id="additional-content" class="mt-8 pt-4 border-t border-gray-200 hidden">
            <!-- Contenedor para la explicación -->
            <div id="explicacion-container" class="mb-6 hidden">
                <h2 class="text-2xl font-bold text-gray-700 mb-4">Explicación</h2>
                <div id="loading-indicator" class="text-gray-500 italic text-center hidden">
                    <i class="fas fa-spinner fa-spin mr-2"></i>Generando explicación...
                </div>
                <p id="explicacion-text" class="text-lg text-gray-600 italic leading-relaxed"></p>
            </div>
            
            <!-- Contenedor para la traducción -->
            <div id="traduccion-container" class="mb-6 hidden">
                <h2 class="text-2xl font-bold text-gray-700 mb-4">Traducción a <span id="idioma-traduccion-display" class="font-bold"></span></h2>
                <div id="loading-indicator-traduccion" class="text-gray-500 italic text-center hidden">
                    <i class="fas fa-spinner fa-spin mr-2"></i>Traduciendo...
                </div>
                <p id="traduccion-text" class="text-lg text-gray-600 italic leading-relaxed"></p>
                <div class="flex flex-col sm:flex-row justify-center items-center space-y-4 sm:space-y-0 sm:space-x-4 mt-4">
                    <button id="parafrasear-btn" class="bg-yellow-600 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-transform duration-200 hover:bg-yellow-700 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-yellow-300 w-full sm:w-auto">
                        Parafrasear ✨
                    </button>
                    <button id="clasificar-btn" class="bg-red-600 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-transform duration-200 hover:bg-red-700 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-red-300 w-full sm:w-auto">
                        Clasificar Tono ✨
                    </button>
                    <button id="leer-traduccion-btn" class="bg-blue-600 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-transform duration-200 hover:bg-blue-700 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300 w-full sm:w-auto hidden">
                        Leer Traducción ✨
                    </button>
                </div>
            </div>

            <!-- Contenedor para el paráfrasis y clasificación -->
            <div id="paraf-clasif-container" class="mb-6 hidden">
                <h3 class="text-xl font-semibold text-gray-700 mb-2 mt-4">Versión parafraseada</h3>
                <div id="loading-indicator-parafrasear" class="text-gray-500 italic text-center hidden">
                    <i class="fas fa-spinner fa-spin mr-2"></i>Parafraseando...
                </div>
                <p id="parafrasear-text" class="text-lg text-gray-600 italic leading-relaxed"></p>
                
                <h3 class="text-xl font-semibold text-gray-700 mb-2 mt-6">Clasificación de Tono</h3>
                <div id="loading-indicator-clasificar" class="text-gray-500 italic text-center hidden">
                    <i class="fas fa-spinner fa-spin mr-2"></i>Clasificando tono...
                </div>
                <ul id="clasificar-list" class="text-lg text-gray-600 italic leading-relaxed list-disc list-inside"></ul>
            </div>

            <!-- Contenedor para el audio -->
            <div id="audio-container" class="mb-6 hidden">
                <div id="loading-indicator-audio" class="text-gray-500 italic text-center hidden">
                    <i class="fas fa-spinner fa-spin mr-2"></i>Generando audio...
                </div>
            </div>
        </div>

    </div>

    <script>
        // Obtenemos las referencias a los elementos HTML
        const proverbioTextSpan = document.querySelector('#proverbio-text span');
        const inputFrase = document.getElementById('input-frase');
        const analizarBtn = document.getElementById('analizar-btn');
        const explicarBtn = document.getElementById('explicar-btn');
        const leerBtn = document.getElementById('leer-btn');
        const traducirBtn = document.getElementById('traducir-btn');
        const langSelect = document.getElementById('lang-select');
        const parafrasearBtn = document.getElementById('parafrasear-btn');
        const clasificarBtn = document.getElementById('clasificar-btn');
        const leerTraduccionBtn = document.getElementById('leer-traduccion-btn');
        
        const additionalContentContainer = document.getElementById('additional-content');
        const explicacionContainer = document.getElementById('explicacion-container');
        const explicacionText = document.getElementById('explicacion-text');
        const loadingIndicator = document.getElementById('loading-indicator');
        const traduccionContainer = document.getElementById('traduccion-container');
        const traduccionText = document.getElementById('traduccion-text');
        const loadingIndicatorTraduccion = document.getElementById('loading-indicator-traduccion');
        const idiomaTraduccionDisplay = document.getElementById('idioma-traduccion-display');
        const audioContainer = document.getElementById('audio-container');
        const loadingIndicatorAudio = document.getElementById('loading-indicator-audio');
        const parafClasifContainer = document.getElementById('paraf-clasif-container');
        const parafrasearText = document.getElementById('parafrasear-text');
        const loadingIndicatorParafrasear = document.getElementById('loading-indicator-parafrasear');
        const clasificarList = document.getElementById('clasificar-list');
        const loadingIndicatorClasificar = document.getElementById('loading-indicator-clasificar');
        
        let audioCtx;

        /**
         * Objeto para almacenar los prompts dinámicamente según el idioma.
         */
        const prompts = {
            es: {
                parafrasear: (frase) => `Parafrasea la siguiente frase en español de forma concisa. Responde solo con la versión parafraseada. Frase: ${frase}`,
                clasificar: (frase) => `Clasifica la siguiente frase en tres versiones con diferentes niveles de formalidad: Formal, Neutra y Coloquial. La respuesta debe ser un arreglo JSON con tres objetos, cada uno con las propiedades 'tono' y 'frase'. Frase: ${frase}`
            },
            en: {
                parafrasear: (frase) => `Paraphrase the following sentence in English concisely. Respond only with the paraphrased version. Sentence: ${frase}`,
                clasificar: (frase) => `Classify the following phrase into three versions with different levels of formality: Formal, Neutral, and Colloquial. The response must be a JSON array with three objects, each with the properties 'tono' and 'frase'. Phrase: ${frase}`
            },
            fr: {
                parafrasear: (frase) => `Paraphrasez la phrase suivante en français de manière concise. Ne répondez qu'avec la version paraphrasée. Phrase: ${frase}`,
                clasificar: (frase) => `Classez la phrase suivante en trois versions avec différents niveaux de formalité : Formel, Neutre et Familier. La réponse doit être un tableau JSON avec trois objets, chacun avec les propriétés 'tono' y 'frase'. Phrase : ${frase}`
            }
        };

        /**
         * Función para obtener los parámetros de la URL o del campo de entrada.
         * @returns {object} Un objeto con la frase y el idioma.
         */
        function getParams() {
            const params = new URLSearchParams(window.location.search);
            const proverbio = params.get('proverbio');
            const lang = params.get('lang');

            // Prioriza el input de la URL si existe, de lo contrario, usa el campo de texto
            const frase = proverbio ? decodeURIComponent(proverbio) : inputFrase.value;

            return {
                frase: frase || "No hay frase para analizar.",
                lang: lang || 'en' // Por defecto, inglés
            };
        }

        /**
         * Oculta todos los contenedores de contenido adicional.
         */
        function hideAdditionalContent() {
            explicacionContainer.classList.add('hidden');
            explicacionText.textContent = '';
            traduccionContainer.classList.add('hidden');
            traduccionText.textContent = '';
            leerTraduccionBtn.classList.add('hidden');
            audioContainer.classList.add('hidden');
            parafClasifContainer.classList.add('hidden');
            parafrasearText.textContent = '';
            clasificarList.innerHTML = '';
            if (audioContainer.querySelector('audio')) {
                audioContainer.removeChild(audioContainer.querySelector('audio'));
            }
            additionalContentContainer.classList.add('hidden');
        }

        /**
         * Función para cargar la frase en la UI
         */
        function loadFrase() {
            const { frase, lang } = getParams();
            proverbioTextSpan.textContent = frase;
            langSelect.value = lang;
            hideAdditionalContent();
        }

        /**
         * Función asíncrona para explicar la frase utilizando la API de Gemini.
         */
        async function explicarProverbio() {
            explicarBtn.disabled = true;
            loadingIndicator.classList.remove('hidden');
            additionalContentContainer.classList.remove('hidden');
            explicacionContainer.classList.remove('hidden');
            explicacionText.textContent = '';
            
            const proverbioActual = proverbioTextSpan.textContent.trim();
            if (proverbioActual === "No hay frase para analizar.") {
                explicacionText.textContent = "Por favor, escribe una frase o carga una desde AppSheet.";
                loadingIndicator.classList.add('hidden');
                explicarBtn.disabled = false;
                return;
            }

            const prompt = `Explica la siguiente frase en español de forma concisa y clara: "${proverbioActual}"`;
            
            try {
                let chatHistory = [];
                chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                const payload = { contents: chatHistory };
                const apiKey = ""
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
                
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();
                
                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const text = result.candidates[0].content.parts[0].text;
                    explicacionText.textContent = text;
                } else {
                    explicacionText.textContent = "Lo siento, no pude generar una explicación.";
                }

            } catch (error) {
                console.error("Error al llamar a la API de Gemini:", error);
                explicacionText.textContent = "Ocurrió un error al intentar obtener la explicación.";
            } finally {
                loadingIndicator.classList.add('hidden');
                explicarBtn.disabled = false;
            }
        }

        /**
         * Función asíncrona para leer la frase original en voz alta (español).
         */
        async function leerFraseOriginal() {
            const fraseActual = proverbioTextSpan.textContent.trim();
            if (!fraseActual || fraseActual === "No hay frase para analizar.") return;

            leerBtn.disabled = true;
            loadingIndicatorAudio.classList.remove('hidden');
            additionalContentContainer.classList.remove('hidden');
            audioContainer.classList.remove('hidden');

            // Usamos una voz masculina para la frase original en español
            const prompt = `Di la siguiente frase en español con un tono informativo: "${fraseActual}"`;
            const voiceName = "Orus";

            try {
                const payload = {
                    contents: [{ parts: [{ text: prompt }] }],
                    generationConfig: {
                        responseModalities: ["AUDIO"],
                        speechConfig: {
                            voiceConfig: { prebuiltVoiceConfig: { voiceName: voiceName } }
                        }
                    },
                    model: "gemini-2.5-flash-preview-tts"
                };
                const apiKey = ""
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=${apiKey}`;
                
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                const result = await response.json();
                const part = result?.candidates?.[0]?.content?.parts?.[0];
                const audioData = part?.inlineData?.data;
                const mimeType = part?.inlineData?.mimeType;

                if (audioData && mimeType && mimeType.startsWith("audio/")) {
                    const base64ToArrayBuffer = (base64) => {
                        const binary_string = window.atob(base64);
                        const len = binary_string.length;
                        const bytes = new Uint8Array(len);
                        for (let i = 0; i < len; i++) {
                            bytes[i] = binary_string.charCodeAt(i);
                        }
                        return bytes.buffer;
                    };

                    const pcmToWav = (pcmData, sampleRate) => {
                        const buffer = new ArrayBuffer(44 + pcmData.length * 2);
                        const view = new DataView(buffer);
                        
                        view.setUint32(0, 0x52494646, false);
                        view.setUint32(4, 36 + pcmData.length * 2, true);
                        view.setUint32(8, 0x57415645, false);
                        view.setUint32(12, 0x666d7420, false);
                        view.setUint32(16, 16, true);
                        view.setUint16(20, 1, true);
                        view.setUint16(22, 1, true);
                        view.setUint32(24, sampleRate, true);
                        view.setUint32(28, sampleRate * 2, true);
                        view.setUint16(32, 2, true);
                        view.setUint16(34, 16, true);
                        view.setUint32(36, 0x64617461, false);
                        view.setUint32(40, pcmData.length * 2, true);
                        
                        let offset = 44;
                        for (let i = 0; i < pcmData.length; i++) {
                            view.setInt16(offset, pcmData[i], true);
                            offset += 2;
                        }
                        
                        return new Blob([view], { type: 'audio/wav' });
                    };

                    const sampleRate = parseInt(mimeType.match(/rate=(\d+)/)[1], 10);
                    const pcmData = base64ToArrayBuffer(audioData);
                    const pcm16 = new Int16Array(pcmData);
                    const wavBlob = pcmToWav(pcm16, sampleRate);
                    const audioUrl = URL.createObjectURL(wavBlob);

                    const audio = new Audio(audioUrl);
                    audio.controls = true;
                    audioContainer.appendChild(audio);
                } else {
                    console.error("Audio data or mime type is missing/invalid.");
                }
            } catch (error) {
                console.error("Error al llamar a la API de Gemini TTS:", error);
            } finally {
                loadingIndicatorAudio.classList.add('hidden');
                leerBtn.disabled = false;
            }
        }

        /**
         * Función asíncrona para traducir la frase utilizando la API de Gemini.
         */
        async function traducirFrase() {
            traducirBtn.disabled = true;
            loadingIndicatorTraduccion.classList.remove('hidden');
            additionalContentContainer.classList.remove('hidden');
            traduccionContainer.classList.remove('hidden');
            traduccionText.textContent = '';
            parafClasifContainer.classList.add('hidden');
            leerTraduccionBtn.classList.add('hidden');
            
            const fraseActual = proverbioTextSpan.textContent.trim();
            if (fraseActual === "No hay frase para analizar.") {
                traduccionText.textContent = "Por favor, escribe una frase o carga una desde AppSheet.";
                loadingIndicatorTraduccion.classList.add('hidden');
                traducirBtn.disabled = false;
                return;
            }
            
            const targetLang = langSelect.value;
            const targetLangDisplay = langSelect.options[langSelect.selectedIndex].text;
            
            idiomaTraduccionDisplay.textContent = targetLangDisplay;

            const prompt = `Traduce la siguiente frase en español a ${targetLang}. Responde solo con la traducción. Frase: ${fraseActual}`;

            try {
                let chatHistory = [];
                chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                const payload = { contents: chatHistory };
                const apiKey = ""
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
                
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                const result = await response.json();
                
                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const text = result.candidates[0].content.parts[0].text;
                    traduccionText.textContent = text.replace(/"/g, '');
                    leerTraduccionBtn.classList.remove('hidden');
                } else {
                    traduccionText.textContent = "Lo siento, no pude generar una traducción.";
                }

            } catch (error) {
                console.error("Error al llamar a la API de Gemini:", error);
                traduccionText.textContent = "Ocurrió un error al intentar obtener la traducción.";
            } finally {
                loadingIndicatorTraduccion.classList.add('hidden');
                traducirBtn.disabled = false;
            }
        }

        /**
         * Función asíncrona para parafrasear la frase traducida.
         */
        async function parafrasearFrase() {
            parafrasearBtn.disabled = true;
            loadingIndicatorParafrasear.classList.remove('hidden');
            parafClasifContainer.classList.remove('hidden');
            parafrasearText.textContent = '';

            const fraseATraducir = traduccionText.textContent.trim();
            const targetLang = langSelect.value;
            const promptFunction = prompts[targetLang] ? prompts[targetLang].parafrasear : prompts.es.parafrasear;
            const prompt = promptFunction(fraseATraducir);

            try {
                let chatHistory = [];
                chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                const payload = { contents: chatHistory };
                const apiKey = ""
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
                
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                const result = await response.json();
                
                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const text = result.candidates[0].content.parts[0].text;
                    parafrasearText.textContent = text.replace(/"/g, '');
                } else {
                    parafrasearText.textContent = "Lo siento, no pude generar una versión parafraseada.";
                }

            } catch (error) {
                console.error("Error al llamar a la API de Gemini:", error);
                parafrasearText.textContent = "Ocurrió un error al intentar parafrasear la frase.";
            } finally {
                loadingIndicatorParafrasear.classList.add('hidden');
                parafrasearBtn.disabled = false;
            }
        }

        /**
         * Función asíncrona para clasificar el tono de la frase.
         */
        async function clasificarTono() {
            clasificarBtn.disabled = true;
            loadingIndicatorClasificar.classList.remove('hidden');
            parafClasifContainer.classList.remove('hidden');
            clasificarList.innerHTML = '';

            const fraseAClasificar = traduccionText.textContent.trim();
            const targetLang = langSelect.value;
            const promptFunction = prompts[targetLang] ? prompts[targetLang].clasificar : prompts.es.clasificar;
            const prompt = promptFunction(fraseAClasificar);
            
            try {
                let chatHistory = [];
                chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                const payload = {
                    contents: chatHistory,
                    generationConfig: {
                        responseMimeType: "application/json",
                        responseSchema: {
                            type: "ARRAY",
                            items: {
                                type: "OBJECT",
                                properties: {
                                    "tono": { "type": "STRING" },
                                    "frase": { "type": "STRING" }
                                }
                            }
                        }
                    }
                };
                const apiKey = ""
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                const result = await response.json();
                
                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const json = result.candidates[0].content.parts[0].text;
                    const parsedJson = JSON.parse(json);

                    parsedJson.forEach(item => {
                        const li = document.createElement('li');
                        li.className = 'my-2';
                        li.innerHTML = `<span class="font-bold">${item.tono}:</span> ${item.frase}`;
                        clasificarList.appendChild(li);
                    });
                } else {
                    const li = document.createElement('li');
                    li.className = 'my-2';
                    li.textContent = "Lo siento, no pude clasificar el tono.";
                    clasificarList.appendChild(li);
                }

            } catch (error) {
                console.error("Error al llamar a la API de Gemini:", error);
                const li = document.createElement('li');
                li.className = 'my-2';
                li.textContent = "Ocurrió un error al intentar clasificar el tono.";
                clasificarList.appendChild(li);
            } finally {
                loadingIndicatorClasificar.classList.add('hidden');
                clasificarBtn.disabled = false;
            }
        }
        
        /**
         * Función asíncrona para leer la frase traducida en voz alta.
         */
        async function leerTraduccion() {
            const fraseActual = traduccionText.textContent.trim();
            const targetLang = langSelect.value;
            if (!fraseActual || fraseActual === "No hay frase para analizar.") return;
        
            leerTraduccionBtn.disabled = true;
            loadingIndicatorAudio.classList.remove('hidden');
            additionalContentContainer.classList.remove('hidden');
            audioContainer.classList.remove('hidden');
        
            // Mapeo de códigos de idioma a voces masculinas de Gemini TTS
            const voiceMap = {
                'en': { voice: 'Iapetus', prompt: `Say the following phrase in English with a clear tone: "${fraseActual}"`},
                'fr': { voice: 'Algenib', prompt: `Dites la phrase suivante en français avec un ton graveleux: "${fraseActual}"`},
                'es': { voice: 'Orus', prompt: `Di la siguiente frase en español con un tono firme: "${fraseActual}"`}
            };
        
            const selectedVoice = voiceMap[targetLang];
            if (!selectedVoice) {
                console.error("Idioma no soportado para la lectura en voz alta.");
                loadingIndicatorAudio.classList.add('hidden');
                leerTraduccionBtn.disabled = false;
                return;
            }
        
            try {
                const payload = {
                    contents: [{ parts: [{ text: selectedVoice.prompt }] }],
                    generationConfig: {
                        responseModalities: ["AUDIO"],
                        speechConfig: {
                            voiceConfig: { prebuiltVoiceConfig: { voiceName: selectedVoice.voice } }
                        }
                    },
                    model: "gemini-2.5-flash-preview-tts"
                };
                const apiKey = ""
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=${apiKey}`;
                
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                
                const result = await response.json();
                const part = result?.candidates?.[0]?.content?.parts?.[0];
                const audioData = part?.inlineData?.data;
                const mimeType = part?.inlineData?.mimeType;
        
                if (audioData && mimeType && mimeType.startsWith("audio/")) {
                    const base64ToArrayBuffer = (base64) => {
                        const binary_string = window.atob(base64);
                        const len = binary_string.length;
                        const bytes = new Uint8Array(len);
                        for (let i = 0; i < len; i++) {
                            bytes[i] = binary_string.charCodeAt(i);
                        }
                        return bytes.buffer;
                    };
        
                    const pcmToWav = (pcmData, sampleRate) => {
                        const buffer = new ArrayBuffer(44 + pcmData.length * 2);
                        const view = new DataView(buffer);
                        view.setUint32(0, 0x52494646, false);
                        view.setUint32(4, 36 + pcmData.length * 2, true);
                        view.setUint32(8, 0x57415645, false);
                        view.setUint32(12, 0x666d7420, false);
                        view.setUint32(16, 16, true);
                        view.setUint16(20, 1, true);
                        view.setUint16(22, 1, true);
                        view.setUint32(24, sampleRate, true);
                        view.setUint32(28, sampleRate * 2, true);
                        view.setUint16(32, 2, true);
                        view.setUint16(34, 16, true);
                        view.setUint32(36, 0x64617461, false);
                        view.setUint32(40, pcmData.length * 2, true);
                        let offset = 44;
                        for (let i = 0; i < pcmData.length; i++) {
                            view.setInt16(offset, pcmData[i], true);
                            offset += 2;
                        }
                        return new Blob([view], { type: 'audio/wav' });
                    };
        
                    const sampleRate = parseInt(mimeType.match(/rate=(\d+)/)[1], 10);
                    const pcmData = base64ToArrayBuffer(audioData);
                    const pcm16 = new Int16Array(pcmData);
                    const wavBlob = pcmToWav(pcm16, sampleRate);
                    const audioUrl = URL.createObjectURL(wavBlob);
        
                    const audio = new Audio(audioUrl);
                    audio.controls = true;
                    audioContainer.appendChild(audio);
                } else {
                    console.error("Los datos de audio o el tipo MIME no son válidos.");
                }
            } catch (error) {
                console.error("Error al llamar a la API de Gemini TTS:", error);
            } finally {
                loadingIndicatorAudio.classList.add('hidden');
                leerTraduccionBtn.disabled = false;
            }
        }
        
        window.onload = function() {
            // Cargar la frase desde la URL o el campo de entrada
            loadFrase();

            // Asigna la función al evento 'click' de los botones
            analizarBtn.addEventListener('click', () => {
                const fraseInput = inputFrase.value.trim();
                if (fraseInput) {
                    proverbioTextSpan.textContent = fraseInput;
                    hideAdditionalContent();
                }
            });
            explicarBtn.addEventListener('click', explicarProverbio);
            leerBtn.addEventListener('click', leerFraseOriginal);
            traducirBtn.addEventListener('click', traducirFrase);
            parafrasearBtn.addEventListener('click', parafrasearFrase);
            clasificarBtn.addEventListener('click', clasificarTono);
            leerTraduccionBtn.addEventListener('click', leerTraduccion);
        };
    </script>
</body>
</html>
